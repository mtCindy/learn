public class TwoLinkListMerge {
    public static void main(String[] args) {

        Node head01 = new Node(1);
        Node node01 = new Node(3);
        Node node02 = new Node(5);
        Node node03 = new Node(7);
        Node node04 = new Node(9);

        // 串起来形成链表
        head01.setNext(node01);
        node01.setNext(node02);
        node02.setNext(node03);
        node03.setNext(node04);

        Node head11 = new Node(2);
        Node node11 = new Node(4);
        Node node12 = new Node(6);
        Node node13 = new Node(8);
        head11.setNext(node11);
        node11.setNext(node12);
        node12.setNext(node13);

        Node head = merge(head01, head11);


        printNode(head);
    }

    public static void printNode(Node head) {
        if (head == null) {
            return;
        }

        Node curNode = head;
        while (curNode != null) {
            System.out.println("++++++++++++++"+curNode.getValue());
            curNode = curNode.getNext();
        }
    }

    public static Node merge(Node l1, Node l2) {
        if (l1 == null) {
            return l2;
        }

        if (l2 == null) {
            return l1;
        }

        Node head = null;
        if (l1.getValue() <= l2.getValue()) {
             head = l1;
             l1 = l1.getNext();
        } else {
            head = l2;
            l2 = l2.getNext();
        }

        Node temp = head;

        while (l1 != null && l2 != null) {
            if (l1.getValue() <= l2.getValue()) {
                temp.setNext(l1);
                l1 = l1.getNext();
            } else {
                temp.setNext(l2);
                l2 = l2.getNext();
            }
            temp = temp.getNext();
        }

        if (l1 == null) {
            temp.setNext(l2);
        }

        if (l2 == null) {
            temp.setNext(l1);
        }

        return head;
    }
}
